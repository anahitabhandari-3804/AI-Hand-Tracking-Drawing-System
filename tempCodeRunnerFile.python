import cv2
import numpy as np
import mediapipe as mp
import socket
import pickle

# Initialize MediaPipe Hands
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(min_detection_confidence=0.7, min_tracking_confidence=0.7)
mp_draw = mp.solutions.drawing_utils

# Initialize canvas and variables
canvas = np.zeros((720, 1280, 3), dtype=np.uint8)
cap = cv2.VideoCapture(0)
prev_x, prev_y = None, None
brush_size = 5
color = (255, 255, 255)

# Server for multi-user collaboration
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind(("0.0.0.0", 12345))
server_socket.listen(5)

clients = []

def send_canvas():
    data = pickle.dumps(canvas)
    for client in clients:
        client.sendall(data)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break
    
    frame = cv2.flip(frame, 1)
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    result = hands.process(rgb_frame)
    
    if result.multi_hand_landmarks:
        for hand_landmarks in result.multi_hand_landmarks:
            index_finger = hand_landmarks.landmark[8]
            x, y = int(index_finger.x * 1280), int(index_finger.y * 720)
            
            if prev_x is not None and prev_y is not None:
                cv2.line(canvas, (prev_x, prev_y), (x, y), color, brush_size)
            
            prev_x, prev_y = x, y
            mp_draw.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)
    else:
        prev_x, prev_y = None, None
    
    # Overlay the canvas on the frame
    frame = cv2.addWeighted(frame, 0.5, canvas, 0.5, 0)
    cv2.imshow("AI Drawing System", frame)
    
    send_canvas()
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
